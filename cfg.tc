%option lang = "C++"
%option state_type = "CFGNodeType"
%option reentrant

%decls %{
    #include <string>
    #include <iostream>

    using std::string;
    using std::cout;

    //class CFGStmt;
    //using CFGStmtPair = std::pair<CFGStmt*, CFGStmt*>;
%}

%{
    #include "cfg.h"
%}

%node CFGNode %abstract %typedef

%node CFGExpr CFGNode %abstract

%node CFGBinExpr CFGExpr %abstract = {
    CFGOperand *op1;
    CFGOperand *op2;
}
%node CFGAddExpr CFGBinExpr
%node CFGSubExpr CFGBinExpr
%node CFGMulExpr CFGBinExpr
%node CFGPowExpr CFGBinExpr
%node CFGDivExpr CFGBinExpr
%node CFGModExpr CFGBinExpr
%node CFGEquExpr CFGBinExpr
%node CFGNeqExpr CFGBinExpr
%node CFGGrtExpr CFGBinExpr
%node CFGLsrExpr CFGBinExpr
%node CFGGeqExpr CFGBinExpr
%node CFGLeqExpr CFGBinExpr
%node CFGOrExpr  CFGBinExpr
%node CFGAndExpr CFGBinExpr

%node CFGOperand CFGExpr %abstract
%node CFGNumOper CFGOperand = {
    int value;
}
%node CFGStackOp CFGOperand
%node CFGLhs CFGOperand = {
    string id;
}

%node CFGStmt CFGNode %abstract = {
    %nocreate CFGStmt *next = {nullptr};
}
%operation %virtual void setNext(CFGStmt *this, CFGStmt* n)
setNext(CFGStmt) {
    next = n;
}
%node CFGAssign CFGStmt = {
    CFGOperand *var;
    CFGExpr *ex;
}
%node CFGNop CFGStmt

%operation %virtual string toString(CFGNode *this)

toString(CFGAddExpr) {
    //cout << op1->toString() + " + ";
    //cout << op2->toString();
}

toString(CFGSubExpr) {

}

toString(CFGMulExpr) {

}

toString(CFGPowExpr) {

}

toString(CFGDivExpr) {

}

toString(CFGModExpr) {

}

toString(CFGEquExpr) {

}

toString(CFGNeqExpr) {

}

toString(CFGGrtExpr) {

}

toString(CFGLsrExpr) {

}

toString(CFGGeqExpr) {

}

toString(CFGLeqExpr) {

}

toString(CFGOrExpr ) {

}

toString(CFGAndExpr) {

}

toString(CFGNumOper) {

}

toString(CFGStackOp) {

}

toString(CFGAssign) {
    cout << "assign\n";
}

toString(CFGNop) {

}

toString(CFGLhs) {

}