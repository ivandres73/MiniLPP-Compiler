%option lang = "c++"

%{
    #include "ast.h"
    #include "cfg.h"

    CFGNodeType cfg;
%}

%decls %{
    #include <iostream>
    #include <unordered_map>
    #include <string>
    #include <list>
    #include <string.h>
    #include <cmath>
    #include <vector>

    using std::list;
    using std::cout;
    using std::cerr;
    using std::string;
    using std::vector;

    class Expr;
    using ExprList = vector<Expr*>;

    class ifStmt;
    using ifStmtList = vector<ifStmt*>;

    class CFGOperand;
    class CFGStmt;
    using CFGStmtPair = std::pair<CFGStmt*, CFGStmt*>;

    using std::to_string;

    union val {
        char car;
        bool boo;
        int num;
    };

    struct val_info {
        string scope;//global, gcd, etc etc
        uint8_t type;//0 char, 1 bool, 2 num
        bool init;
        val value;
        uint8_t getType() { return type; }
    };

    struct Context {
        std::unordered_map<string, val_info> vars;
        std::unordered_map<string, string> strTable;
        int strCount = 0;
        int offset = 0;
        void insertToStrTable(string value) {
            if (strTable.find(value) == strTable.end()) {
                strTable.emplace(value, "SL" + to_string(strCount++));
            }
        }
        string getLabelfromStrTable(string value) {
            if (strTable.find(value) != strTable.end()) {
                return strTable.find(value)->second;
            }
            cerr << "string literal not found\n";
            throw "error";
        }
        string getTemp() { return "t" + to_string(offset); }
    };

    class Statement;
    using StmtList = list<Statement*>;
%}

%node ASTNode %abstract %typedef = {
    %nocreate CFGOperand* place;
}

%node Expr ASTNode %abstract

%node Statement ASTNode %abstract

%node BinExpr Expr %abstract = {
    Expr *expr1;
    Expr *expr2;
}
%operation %virtual bool checkVars(BinExpr*, Context& ctx)
checkVars(BinExpr) {
    CharExpr *c1 = dynamic_cast<CharExpr*>(expr1);
    CharExpr *c2 = dynamic_cast<CharExpr*>(expr2);
    if (c1 != 0 || c2 != 0) {
        cerr << "no se puede efectuar operaciones con chars\n";
        throw;
    }

    IdenExpr *ce1 = dynamic_cast<IdenExpr*>(expr1);
    IdenExpr *ce2 = dynamic_cast<IdenExpr*>(expr2);

    if (ce1 != 0) {
        string name = ce1->var_name;
        std::unordered_map<string, val_info>::const_iterator var = ctx.vars.find(name);
        if (var != ctx.vars.end()) {
            if (!var->second.init) {
                cerr << name << " no ha sido inicializada\n";
                throw;
            }
            if (var->second.type == 0) {
                cerr << "no se puede efectuar operaciones con chars\n";
                throw;
            }
        } else {
            cerr << expr1->toString(ctx) << " no existe\n";
            throw;
        }
    }

    if (ce2 != 0 ) {
        string name = ce2->var_name;
        std::unordered_map<string, val_info>::const_iterator var = ctx.vars.find(name);
        if (var != ctx.vars.end()) {
            if (!var->second.init) {
                cerr << name << " no ha sido inicializada\n";
                throw;
            }
            if (var->second.type == 0) {
                cerr << "no se puede efectuar operaciones con chars\n";
                throw;
            }
        } else {
            cerr << expr1->toString(ctx) << " no existe\n";
            throw;
        }
    }
}

%node AddExpr BinExpr
%node SubExpr BinExpr
%node MulExpr BinExpr
%node PowExpr BinExpr
%node DivExpr BinExpr
%node ModExpr BinExpr
%node EquExpr BinExpr
%node NeqExpr BinExpr
%node GrtExpr BinExpr
%node LsrExpr BinExpr
%node GeqExpr BinExpr
%node LeqExpr BinExpr
%node OrExpr  BinExpr
%node AndExpr BinExpr

%node NotExpr Expr = {
    Expr *expr;
}
%node NegExpr Expr = {
    Expr *expr;
}
%node NumExpr Expr = {
    int value;
}
%node IdenExpr Expr = {
    string var_name;
}
%node BlockExpr Expr = {
    ExprList list;
}

%operation %virtual void addExpr(BlockExpr* this, Expr* e)
%operation %virtual void copyFrom(BlockExpr* this, BlockExpr* src)
addExpr(BlockExpr) {
    list.push_back(e);
}
copyFrom(BlockExpr) {
    Context empty;
    for (auto i : src->list) {
        list.push_back(i);
        //cout << i->toString(empty) << '\n';
    }
}

%node StringExpr Expr = {
    string value;
}
%node CharExpr Expr = {
    char value;
}
%node BoolExpr Expr = {
    bool value;
}

%node BlockStmt Statement = {
    StmtList list;
}

%operation %virtual void addStmt(BlockStmt* this, Statement* s)
addStmt(BlockStmt) {
    list.push_back(s);
}

%node printStmt Statement = {
    BlockExpr *args;
}
%node assignStmt Statement = {
    string var_name;
    Expr *expr;
}
%node ifStmt Statement = {
    Expr *expr;
    BlockStmt *true_block;
    elseifBlock *elses;
}
%node elseifBlock Statement = {
    ifStmtList elseifs;
    BlockStmt *false_block;
}
%operation %virtual void addIfStmt(elseifBlock* this, ifStmt* is)
addIfStmt(elseifBlock) {
    elseifs.push_back(is);
}

%node returnStmt Statement = {
    Expr *expr;
}
%node readStmt Statement = {
    string lval;
}
%node callStmt Statement = {
    string id;
}
%node whileStmt Statement = {
    Expr *expr;
    BlockStmt *block;
}
%node doStmt Statement = {
    BlockStmt *b;
    Expr *expr;
}
%node forStmt Statement = {
    string id;
    Expr *init_expr;
    Expr *fin_expr;
    BlockStmt *block;
}
%node declStmt Statement = {
    string type;
    BlockExpr *ids;
}

%operation %virtual string toString(ASTNode *this, Context &ctx)

%operation %virtual string getString(StringExpr*)
%operation %virtual char getChar(CharExpr*)
%operation %virtual bool getBool(BoolExpr*)
getString(StringExpr) { return value; }
getChar(CharExpr) { return value; }
getBool(BoolExpr) { return value; }
toString(IdenExpr) { return var_name; }
toString(NumExpr) { return to_string(value); }

toString(AddExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " + " + expr2->toString(ctx);
}

toString(SubExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " - " + expr2->toString(ctx);
}

toString(MulExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " * " + expr2->toString(ctx);
}

toString(PowExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " ^ " + expr2->toString(ctx);
}

toString(DivExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " div " + expr2->toString(ctx);
}

toString(ModExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " mod " + expr2->toString(ctx);
}

toString(EquExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " = " + expr2->toString(ctx);
}

toString(NeqExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " <> " + expr2->toString(ctx);
}

toString(GrtExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " > " + expr2->toString(ctx);
}

toString(LsrExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " < " + expr2->toString(ctx);
}

toString(GeqExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " >= " + expr2->toString(ctx);
}

toString(LeqExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " <= " + expr2->toString(ctx);
}

toString(OrExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " o " + expr2->toString(ctx);
}

toString(AndExpr) {
    checkVars(ctx);
    return expr1->toString(ctx) + " y " + expr2->toString(ctx);
}

toString(NotExpr) {
    return "no " + expr->toString(ctx);
}

toString(NegExpr) {
    return "-" + expr->toString(ctx);
}

toString(StringExpr) { return value; }

toString(CharExpr) {
    string s = "";
    s += value;
    return s;
}

toString(BoolExpr) { return value ? "Verdadero" : "Falso"; }

toString(printStmt) {
    string s("Escriba ");
    s += args->toString(ctx);
    return s;
}

toString(assignStmt) {
    if (ctx.vars.find(var_name) == ctx.vars.end()) {
        cerr << "variable " + var_name + " no existe\n";
        throw;
    }
    else if (ctx.vars.find(var_name)->second.type == 0) {
        CharExpr *ce = dynamic_cast<CharExpr*>(expr);
        if (ce != 0) {
            ctx.vars.find(var_name)->second.value.car = expr->toString(ctx)[0];
            ctx.vars.find(var_name)->second.init = true;
        } else {
            cerr << "can't assign " + expr->toString(ctx) + " to char\n";
            throw;
        }
    } else if (ctx.vars.find(var_name)->second.type == 2) {
        CharExpr *ce = dynamic_cast<CharExpr*>(expr);
        if (ce == 0) {
            //ctx.vars.find(var_name)->second.value.car = expr->toString(ctx)[0];
            ctx.vars.find(var_name)->second.init = true;
        } else {
            cerr << "can't assign '" + expr->toString(ctx) + "' to int\n";
            throw;
        }
    } else if (ctx.vars.find(var_name)->second.type == 1) {
        CharExpr *ce = dynamic_cast<CharExpr*>(expr);
        if (ce == 0) {
            //ctx.vars.find(var_name)->second.value.car = expr->toString(ctx)[0];
            ctx.vars.find(var_name)->second.init = true;
        } else {
            cerr << "can't assign '" + expr->toString(ctx) + "' to boolean\n";
            throw;
        }
    }
    return var_name + " <- " + expr->toString(ctx);
}

toString(ifStmt) {
    string s("si ");
    s += expr->toString(ctx);
    s += " entonces\n";
    s += true_block->toString(ctx);
    if (elses != nullptr) {
        if (elses->elseifs.empty()) {
            s += "\nsino\n";
            s += elses->false_block->toString(ctx);
        }
    }
    s += "fin si";
    return s;
}

toString(elseifBlock) {
    return "soy elses";
}

toString(returnStmt) {
    string s("retorne");
    if (expr != nullptr) {
        s += " " + expr->toString(ctx);
    }
    return s;
}

toString(BlockExpr) {
    string s;
    for (auto i : list) {
        s += i->toString(ctx);
    }
    return s;
}

toString(BlockStmt) {
    string s;
    for (auto i : list) {
        s += i->toString(ctx);
        s += '\n';
    }
    return s;
}

toString(readStmt) {
    string s("lea ");
    s += lval;
    return s;
}

toString(callStmt) {
    string s("llamar ");
    s += id;
    return s;
}

toString(whileStmt) {
    string s("mientras ");
    s += expr->toString(ctx);
    s += " haga\n";
    s += block->toString(ctx);
    s += "\nfin mientras";
    return s;
}

toString(doStmt) {
    string s("repita\n");
    s += b->toString(ctx);
    s += "hasta " + expr->toString(ctx);
    return s;
}

toString(forStmt) {
    string s("para ");
    s += id;
    s += " <- ";
    s += init_expr->toString(ctx);
    s += " hasta ";
    s += fin_expr->toString(ctx);
    s += " haga\n";
    s += block->toString(ctx);
    s += "\nfin para";
    return s;
}

toString(declStmt) {
    string s(type);
    s += " " + ids->toString(ctx);
    string curr_var;
    for (auto i : ids->list) {
        curr_var = i->toString(ctx);
        if (ctx.vars.find(curr_var) == ctx.vars.end()) {
            val_info info;
            info.value = val();
            info.scope = string("global");
            info.type = 0;
            info.init = false;
            if (type == "entero") {
                info.type = 2;
            } else if (type == "boolean") {
                info.type = 1;
            }
            ctx.vars.emplace(curr_var, info);
        } else
        {
            cerr << curr_var << " ya existe\n";
        }
        
    }
    return s;
}

/*** TO CFG ***/

%operation %virtual CFGStmtPair toCFG(ASTNode *this, Context& ctx)

toCFG(AddExpr) {
    CFGStmtPair op1 = expr1->toCFG(ctx);
    CFGStmtPair op2 = expr2->toCFG(ctx);

    place = cfg.CFGLhsCreate(ctx.getTemp());

    CFGExpr *expr = cfg.CFGAddExprCreate(expr1->place, expr2->place);

    CFGStmt *stmt = cfg.CFGAssignCreate(place, expr);

    op1.second->setNext(op2.first);
    op2.second->setNext(stmt);
    
    return CFGStmtPair(op1.first, stmt);
}

toCFG(SubExpr) {

}

toCFG(MulExpr) {

}

toCFG(PowExpr) {

}

toCFG(DivExpr) {

}

toCFG(ModExpr) {

}

toCFG(EquExpr) {

}

toCFG(NeqExpr) {

}

toCFG(GrtExpr) {

}

toCFG(LsrExpr) {

}

toCFG(GeqExpr) {

}

toCFG(LeqExpr) {

}

toCFG(OrExpr ) {

}

toCFG(AndExpr) {

}

toCFG(NotExpr) {

}

toCFG(NumExpr) {
    place = cfg.CFGNumOperCreate(value);
    CFGNop *nop = cfg.CFGNopCreate();
    return CFGStmtPair(nop, nop);
}

toCFG(IdenExpr) {
    place = cfg.CFGLhsCreate(var_name);
    CFGNop *nop = cfg.CFGNopCreate();
    return CFGStmtPair(nop, nop);
}

toCFG(BlockExpr) {
    for (auto i : list) {
        i->toCFG(ctx);
    }
}

toCFG(StringExpr) {

}

toCFG(CharExpr) {

}

toCFG(BoolExpr) {

}

toCFG(NegExpr) {

}

toCFG(BlockStmt) {
    CFGNop *nop = cfg.CFGNopCreate();
    CFGStmtPair p(nop, nop);
    std::list<Statement*>::iterator it1 = list.begin();
    std::list<Statement*>::iterator it2 = list.begin();
    it2++;
    bool flag = true;
    for (; it1 != list.end(); it1++) {
        CFGStmtPair stmt1 = (*it1)->toCFG(ctx);
        if (flag) {
            p.first = stmt1.first;
            //cout << "seteado\n";
            flag = false;
        }
        if (it2 != list.end() && it2 != it1) {
            CFGStmtPair stmt2 = (*it2)->toCFG(ctx);
            stmt1.second->setNext(stmt2.first);
        }
        it2++;
    }
    return p;
}

toCFG(printStmt) {
    CFGStmt *param;
    CFGOperand *str;
    for (auto i : args->list) {
        StringExpr *se = dynamic_cast<StringExpr*>(i);
        if (se != 0) {
            ctx.insertToStrTable(i->toString(ctx));
            str = cfg.CFGLhsCreate(i->toString(ctx));
            param = cfg.CFGParamStmtCreate(str);
        }
    }
    int paramCount = args->list.size();
    CFGStmt *call = cfg.CFGCallStmtCreate("printf", paramCount);
    param->setNext(call);

    return CFGStmtPair(param, call);
}

toCFG(assignStmt) {
    CFGStmtPair e = expr->toCFG(ctx);

    place = cfg.CFGLhsCreate(var_name);

    CFGStmt *stmt = cfg.CFGAssignCreate(place, expr->place);
    e.second->setNext(stmt);
    //cout << "expr = " << e.second->toString();
    cout << CFGToString(e.first);

    return CFGStmtPair(stmt, stmt);
}

toCFG(ifStmt) {

}

toCFG(elseifBlock) {

}

toCFG(returnStmt) {

}

toCFG(readStmt) {

}

toCFG(callStmt) {

}

toCFG(whileStmt) {

}

toCFG(doStmt) {

}

toCFG(forStmt) {

}

toCFG(declStmt) {
    CFGNop *nop = cfg.CFGNopCreate();
    return CFGStmtPair(nop, nop);
}